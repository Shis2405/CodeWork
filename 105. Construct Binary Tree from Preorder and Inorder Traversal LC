/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder==null|| inorder==null|| preorder.length!=inorder.length) return null;
        HashMap<Integer, Integer> mp= new HashMap<Integer, Integer> ();
        for(int i=0; i<inorder.length;++i) mp.put(inorder[i],i);
        TreeNode root=buildPreIn(preorder, 0, preorder.length -1, inorder,0, inorder.length-1,mp);
        return root;
    }
    
    private TreeNode buildPreIn(int []preorder, int ps, int pe,int [] inorder,int is, int ie,HashMap<Integer, Integer> mp) {
        
        if(ps>pe || is>ie) return null;
        TreeNode root= new TreeNode(preorder[ps]);
        int inRoot=mp.get(preorder[ps]);
        int numsLeft=inRoot- is;
        root.left=buildPreIn(preorder, ps+1, ps+numsLeft, inorder,is, inRoot -1,mp);
        root.right=buildPreIn(preorder, ps+numsLeft+1, pe, inorder,inRoot+1, ie,mp);
        return root;
    }
    
}
