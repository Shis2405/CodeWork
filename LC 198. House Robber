//Generic solution

class Solution {
    public int rob(int[] num) {
    int rob = 0; //max monney can get if rob current house
    int notrob = 0; //max money can get if not rob current house
    for(int i=0; i<num.length; i++) {
        int currob = notrob + num[i]; //if rob current value, previous house must not be robbed
        notrob = Math.max(notrob, rob); //if not rob ith house, take the max value of robbed (i-1)th house and not rob (i-1)th house
        rob = currob;
    }
    return Math.max(rob, notrob);
}
}


//Dynamic Programming

class Solution {

    public int rob ( int [] nums){
        int n= nums.length;
        if(nums.length==0) return 0;
        if(nums.length==1) return nums[0];

        int []mark= new int[n];
        mark[0]= nums[0];
        mark[1]= Math.max(nums[0], nums[1]);

        for(int i=2;i<n;i++){
            mark[i]=Math.max(nums[i]+mark[i-2], mark[i-1]);
        }

        return mark[n-1];
    }
    
}
