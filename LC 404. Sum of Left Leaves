/*Recursive approach*
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null) return 0;
        int ans=0;
        if(root.left!=null){
            if(root.left.left==null && root.left.right==null) ans += root.left.val;
            else ans+=sumOfLeftLeaves(root.left);

        }
        ans += sumOfLeftLeaves(root.right);
        return ans;
        
    }
}


//Iterative approach

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null) return 0;
        int ans=0;
        Stack<TreeNode> st= new Stack<TreeNode>();
        st.push(root);

        while(!st.empty()){
            TreeNode temp=st.pop();
            if(temp.left!=null){
                if(temp.left.left==null && temp.left.right==null) ans+=temp.left.val;
                else st.push(temp.left);

            }
            if(temp.right!=null){
                if(temp.right.left!=null || temp.right.right!=null){
                    st.push(temp.right);
                }

                

            }
            

        }
        
        
        return ans;
        
    }
}
