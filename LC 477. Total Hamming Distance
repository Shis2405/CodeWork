Brute Force:

class Solution {
    public int totalHammingDistance(int[] nums) {
        
        int xor=0;
        int count=0;
         if(nums.length==0) return xor;
        //First get the list of the xor of the elements
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                 xor += nums[i] ^ nums[j];
                
            //Here we are getting the count of the elements which have a different bits in it    
                while(xor!=0){
                xor = xor&(xor-1);
                count++;
            }
        }
        
        }
        return count;
    }
}
// below solution with O(N) time complexity due to hamming distance neing covered by the fact that it si shifted by 1 each time

class Solution {
    public int totalHammingDistance(int[] nums) {
        
        long res=0;
        for(int i=0;i<32;i++){
            long counton=0;
            for(int val:nums){
                if((val &(1<<i))!=0)
                   {
                       counton++;
                   }
            }
            long countoff=nums.length-counton;
            long diff= counton*countoff;
            res +=diff;
        }
        return (int)res;
    }
}
