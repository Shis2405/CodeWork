//Inorder needs the left then root and then the right part of the tree

//recursive approach

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> ans = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        //recursive approach

        if(root==null) return ans;
        inorderTraversal(root.left);
        ans.add(root.val);
        return inorderTraversal(root.right);
        
    }
}

//Iterative approach



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<Integer> inorderTraversal(TreeNode root) {
        //iterative approach
        List<Integer> ans= new ArrayList<>();
        Stack<TreeNode> st= new Stack<>();
        TreeNode curr=root;
        while(!st.isEmpty() || curr !=null){
            while(curr!=null){
                st.push(curr);
                curr=curr.left;


            }
            curr=st.pop();
            ans.add(curr.val);
            curr=curr.right;

        }
      return ans;  
        
    }
}

