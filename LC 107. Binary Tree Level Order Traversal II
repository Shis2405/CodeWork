/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {

        ArrayList<List<Integer>> ans = new ArrayList<List<Integer>>();
        if(root==null) return ans;
        Queue<TreeNode> q= new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int n=q.size();
            List<Integer> nodes= new ArrayList<Integer>();
            for(int i=0;i<n;i++){
                TreeNode node=q.poll();
                nodes.add(node.val);
                if(node.left!=null) q.add(node.left);
                if(node.right!=null) q.add(node.right);
                
            }
            ans.add(0,nodes);
        }
        return ans;
    }
}

//Recursive ssolution


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {

        ArrayList<List<Integer>> ans = new ArrayList<List<Integer>>();
        compute(ans, root, 0);
        return ans;
    }

    public void compute(ArrayList<List<Integer>> ans, TreeNode root, int level){
        if(root==null) return;
        if(ans.size()==level){
            ans.add(0, new ArrayList<Integer>());

        }
        ans.get(ans.size()-level-1).add(root.val);

        compute(ans,root.left,level+1);
        compute(ans,root.right,level+1);

    }
}
