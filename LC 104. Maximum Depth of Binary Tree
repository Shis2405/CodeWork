/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        int lh = maxDepth(root.left);
        int rh = maxDepth(root.right);
        int th= Math.max(lh,rh) + 1;
        return th;
    }
}

//Iterative approach

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
     if(root == null) return 0;
     Queue<TreeNode> q= new LinkedList<TreeNode>();
     q.add(root);
     int height = 0;
     while(true){
         int size=q.size();
         if(size==0) {break;}
         

         while(size>0){
             TreeNode t=q.remove();
             if(t.left!=null){
                 q.add(t.left);
             }
             if(t.right!=null){
                 q.add(t.right);
             }
             size--;
         }
         height +=1;

     }
     return height;
    }
}
Console
