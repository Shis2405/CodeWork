/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder==null || inorder==null || inorder.length==0|| preorder.length==0) return null;
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0; i< inorder.length;++i) map.put(inorder[i], i);
        TreeNode root=helper(preorder, 0, preorder.length -1, inorder,0, inorder.length-1,map);
        return root;
        
    }
    private TreeNode helper(int [] preorder, int psi, int pei, int [] inorder, int isi, int iei, HashMap<Integer, Integer> map){
        if(psi>pei || isi>iei) return null;
        TreeNode root= new TreeNode(preorder[psi]);
        int inRoot= map.get(preorder[psi]);
        int numsLeft= inRoot-isi;
        root.left=helper(preorder,psi+1, psi+numsLeft,inorder,isi,inRoot-1, map);
        root.right=helper(preorder,psi+numsLeft+1, pei,inorder,inRoot+1,iei, map);
        return root;

    }
    
}


