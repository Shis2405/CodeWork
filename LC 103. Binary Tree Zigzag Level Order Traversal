Recursive solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        ArrayList<List<Integer>> ans= new ArrayList<List<Integer>>();
        compute(ans,root,0);
        return ans;
    }

    public void compute(ArrayList<List<Integer>> ans, TreeNode root, int level){
        if(root==null) return ;

        if(ans.size()==level) ans.add(new ArrayList<Integer>());

        if(level%2==0){
            ans.get(level).add(root.val);
        
        }

        else ans.get(level).add(0,root.val);

        compute(ans,root.left, level + 1);
        compute(ans,root.right, level + 1);
    }

}

//Iterative using queue bfs

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        ArrayList<List<Integer>> ans= new ArrayList<List<Integer>>();
        if(root==null) return ans;
        Queue<TreeNode> q = new LinkedList<TreeNode> ();
        q.add(root);
        int l=0;

        while (!q.isEmpty()) {
        int n = q.size();
        List<Integer> level = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            TreeNode node = q.poll();
            if (node != null) {
                level.add(node.val);
                q.add(node.left);
                q.add(node.right);
            }
        }
        if (!level.isEmpty()) {
            if (l % 2 == 1) {
                Collections.reverse(level);
            }
            ans.add(level);
        }
        l++;
    }
    return ans;
 }
}

    
