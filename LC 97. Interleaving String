Brute Recursive Solution, TLE

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s3.length()!=s2.length()+s1.length()) return false;
        return check(s1,s2,s3,0,0);
    }

    public boolean check(String s1, String s2, String s3, int i, int j){
        int n=s1.length();
        int m=s2.length();
        int o=s3.length();

        //Base case

        if(i==n && j==m) return true;

        if(i<n && s1.charAt(i)==s3.charAt(i+j)){
            boolean f1=check(s1,s2,s3,i+1,j);
            if(f1) return true;
        }

        if(j<m && s2.charAt(j)==s3.charAt(i+j)){
            boolean f2=check(s1,s2,s3,i,j+1);
            if(f2) return true;
        }
        return false;
    }
}

//Memoization

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s3.length()!=s2.length()+s1.length()) return false;
        Boolean dp [][]=new Boolean[s1.length()+1][s2.length()+1];
        return check(s1,s2,s3,0,0,dp);
    }

    public boolean check(String s1, String s2, String s3, int i, int j, Boolean [][]dp){
        int n=s1.length();
        int m=s2.length();
        int o=s3.length();

        //Base case

        

        if(i==n && j==m) return true;
        if(dp[i][j] != null) {return dp[i][j];}

        if(i<n && s1.charAt(i)==s3.charAt(i+j)){
            dp[i][j]=check(s1,s2,s3,i+1,j,dp);
            if(dp[i][j]) return true;
        }

        if(j<m && s2.charAt(j)==s3.charAt(i+j)){
            dp[i][j]=check(s1,s2,s3,i,j+1,dp);
            if(dp[i][j]) return true;
        }
        dp[i][j]=false;
        return dp[i][j];
    }
}


//Tabulation:
Here the dp is taken for the length +1 so as to store the 0 or null taken character
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s3.length() != s1.length()+s2.length()) return false;

        boolean [][]dp= new boolean [s1.length()+1][s2.length()+1];
        
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                if(i==0 && j==0) dp[i][j]=true;
                else if(i==0){
                    dp[i][j]= s2.charAt(j-1) == s3.charAt(i+j-1)? dp[i][j-1]:false;

                }

                else if(j==0){
                    dp[i][j]= s1.charAt(i-1) == s3.charAt(i+j-1)? dp[i-1][j]:false;

                }
                else{
                    if(s1.charAt(i-1)==s3.charAt(i+j-1))  dp[i][j]=dp[i-1][j];
                    if(!dp[i][j] && s2.charAt(j-1)==s3.charAt(i+j-1))  dp[i][j]=dp[i][j-1];
                }
            }
        }
        return dp[dp.length-1][dp[0].length-1];
    }
}
