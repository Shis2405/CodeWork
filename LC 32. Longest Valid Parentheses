//TC=O(N) and SC=O(N), Stack solution
public class Solution {
    public int longestValidParentheses(String s) {
        int maxans=0;

        Stack<Integer> stack = new Stack <>();
        stack.push(-1);

        for(int i=0;i<s.length();i++){
            if(s.charAt(i)== '('){
                stack.push(i);

            }
            else{
                stack.pop();
                if(stack.empty()){
                    stack.push(i);
                }
                else{
                    maxans= Math.max(maxans, i-stack.peek());
                }
            }
        }
        return maxans;
    }
}


// 2 pointer TC=O(N) and SC = O(1)

public class Solution {
    public int longestValidParentheses(String s) {
        int left=0,right=0,maxlength=0;
        int n=s.length();

        for(int i=0;i<n;i++){
            if(s.charAt(i)=='(') left++;
            else right++;
            if(left==right) maxlength= Math.max(maxlength, 2*right);
            else if(right>=left) left=right=0;
        }
        left=right=0;
        for(int i=n-1;i>=0;i--){
            if(s.charAt(i)== '(') left++;
            else right++;
            if(left==right) maxlength= Math.max(maxlength, 2*left);
            else if(right<=left) left=right=0;
        }
        return maxlength;
    }
}
